
#####################################################################
#  Homing definition
#####################################################################
# ##  USE either safe homing or homing override
# [safe_z_home]
# home_xy_position: 150,150
# # Example home_xy_position: 175,175 - This would be for a 350 * 350mm bed. 
# z_hop: 10


[homing_override]
axes: z
set_position_z: 0
gcode:
  ##### get user defines #####
  # use -10 as default to insure it error in case the variable is not existing
  {% set z_endstop = printer['gcode_macro _USER_VARIABLE'].z_endstop|default([-10,-10]) %}
  {% set z_endstop_hop = printer['gcode_macro _USER_VARIABLE'].z_endstop_hop %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_HOMING
  G91              ; set relative
  G0 Z{z_endstop_hop} F900 ; lift nozzle
  G90              ; set absolute
  ## reduce current of Z motors
  _SET_ACC VAL=HOME
#  _SET_Z_CURRENT VAL=HOME
  # Home X and Y only for G28 or G28 XYZ
  {% if 'Z' in params|upper %}
    {% if "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
    {% if "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% endif %}
  {% else %}
    G28 Y
    G28 X
  {% endif %}      
  ##	XY Location of the Z Endstop Switch
  G0  X{z_endstop[0]} Y{z_endstop[1]} F20000 
    # Home Z
  G28 Z
  ## move nozzle from pin
  #G0 Z5 F300
  ## return to org current settings
  # Lift Z
  G0 Z{z_hop} F1800
  _SET_ACC
  #_SET_Z_CURRENT
  RESTORE_GCODE_STATE NAME=STATE_HOMING
  

#####################################################################
#  Macros
#####################################################################
## conditional home
[gcode_macro _CG28]
description: Helper: conditional homing
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro _SET_Z_CURRENT]
description: Helper: Set Z-drive motor current
variable_last_val: 'CONFIG'
gcode:
  ###### set default values #####
  {% set default_respond = printer['gcode_macro _USER_VARIABLE'].respond_set_z_current|int %}
  {% set val = params.VAL|default('CONFIG') %}
  {% set respond = params.RESPOND|default(default_respond)|int %}
  {% if val == 'HOME' %}
    {% set z_run  = printer['gcode_macro _USER_VARIABLE'].z_home_current %}
  {% else %}
    {% if 'tmc2209 stepper_z' in printer.configfile.settings %}
      {% set z_run  = printer.configfile.settings['tmc2209 stepper_z'].run_current %}
    {% elif 'tmc5160 stepper_z' in printer.configfile.settings %}
      {% set z_run  = printer.configfile.settings['tmc5160 stepper_z'].run_current %}
    {% endif %}
  {% endif %}
  ##### end of definition #####
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_Z_CURRENT VARIABLE=last_val VALUE='"{val}"'
    {% if respond == 1 %}
      {action_respond_info("Home&Probe: RunCur %.2fA rms" % (z_run|float))}
    {% endif %}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run}
    M400
  {% endif %}

[gcode_macro _SET_ACC]
description: Helper: Set accel and accel_to_decel value
variable_last_val: 'CONFIG'
gcode:
  ##### set default value #####
  {% set default_respond = printer['gcode_macro _USER_VARIABLE'].respond_set_acc|int %}
  {% set val = params.VAL|default('CONFIG') %}
  {% set respond = params.RESPOND|default(default_respond)|int %}
  {% if val == 'HOME' %}
    {% set accel = printer['gcode_macro _USER_VARIABLE'].home_accel %}
  {% else %}
    {% set accel = printer.configfile.settings.printer.max_accel %}
  {% endif %}
  ##### end of definition #####
  {% if val != last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {% if respond == 1 %}
      {action_respond_info("VELOCITY_LIMIT set ACCEL: %d" % (accel|int))}
    {% endif %}
    SET_VELOCITY_LIMIT ACCEL={accel} RESPOND=0
  {% endif %}