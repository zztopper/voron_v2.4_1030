#  SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
#  SET_RETRACTION is commonly set as part of slicer per-filament configuration, as different filaments require different
#  parameter settings.
#  GET_RETRACTION Queries the current parameters used by firmware retraction and displays them on 
[firmware_retraction]
#   The length of filament (in mm) to retract when G10 is activated,
#   and to unretract when G11 is activated
retract_length: 0.5
#   The length (in mm) of *additional* filament to add when
#   unretracting.
unretract_extra_length: 0
retract_speed: 50
unretract_speed: 30

#[belay tr_belay]
#extruder_type: trad_rack
#sensor_pin: tr:EXTRA
#multiplier_high: 1.05
#multiplier_low: 0.95
#debug_level: 0

[gcode_macro COLDPULL]
gcode:
    M104 S270
    G1 E100 F120
    M109 S60
    G1 E-2 F120
    M109 S130
    G1 E-2 F120
    G4 P1000
    M104 S140
    G1 E-2 F120
    G4 P1000
    M104 S150
    G1 E-2 F120
    G4 P1000
    M104 S160
    G1 E-2 F120
    G4 P1000
    M104 S170
    G1 E-2 F120
    G4 P1000
    M104 S180
    G1 E-2 F120
    G4 P1000
    M104 S190
    G1 E-2 F120
    G4 P1000
    M104 S200
    M104 S0
    G1 E-2 F120
    G1 E-80 F1200

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

#####################################################################
# 	Macro
#####################################################################
[gcode_macro _FILAMENT_BALL]
description: Helper: Round the filament tip
gcode:
  ##### set default parameter value #####
  {% set wait = params.WAIT|default(0) %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=STATE_FILAMENT_BALL
  # Ball up the filament tip
  G92 E0       ; zero the extruder
  M82          ; absolute extrusion
  G1 E2 F3600
  G1 E0 F3600
  G1 E4 F3600
  G1 E0 F3600
  G1 E8 F3600
  G1 E0 F3600
  M83          ; relative extrusion
  G1 E-25 F3600
  G4 P{wait|int * 1000}
  RESTORE_GCODE_STATE NAME=STATE_FILAMENT_BALL

[gcode_macro LOAD_FILAMENT]
description: Load macro alias for KlipperScreen
gcode:
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  FILAMENT_LOAD {get_params|join(" ")}

[gcode_macro FILAMENT_LOAD]
description: Load filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set load = printer['gcode_macro _USER_VARIABLE'].load_distance %}
  {% set extrude = printer['gcode_macro _USER_VARIABLE'].load_extrude %}
  {% set retract = printer['gcode_macro _USER_VARIABLE'].retract_end|float * -1 %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
   ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  {% set loadTemp = params.TEMP|default(0) %}
  {% if loadTemp == 0 %}
    {% set loadTemp = extruder_target%}
  {% endif %}

  ##### calc movement high #####
  {% if act_z < z_hop %}
    {% set move_z = z_hop %}
  {% else %}
    {% set move_z = act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
    {% if ena_runout == 'motion' %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if ena_runout == 'switch' %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    ## Move to waste bin
    _CG28                          ; home if not already homed
    G90                            ; absolute positioning
    G1 Z{move_z} F1800             ; move head to minimum
    G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
        {% if ena_neo == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
    {% set temp_changed = false %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      {% set temp_changed = true %}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    {% if loadTemp != extruder_target %}
      {% set temp_changed = true %}
      M109 S{loadTemp}
    {% endif %}
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RESTORE {% endif %}
    G1 Z{purge_pos[2]} F1800 
    M83                  ; set extruder to relative
    G1 E{load} F600     ; quickly load 90mm filament
    G1 E{extrude} F600   ; slower extrusion for hotend path
    G1 E{retract} F1000 ; retract 
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"true"'
    # clean nozzle
    _WIPE
    G1 Z{move_z} F1800        
    G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
    # restore old extruder temperature
    {% if temp_changed %}
      M109 S{extruder_target}
    {% endif %}
    {% if ena_runout == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}
    {% if ena_runout == 'switch' %}
      _PRINT_AR T="RUNOUT switch Sensor Enable: true"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}

    _PRINT_AR T="Filament loaded"
    RESTORE_GCODE_STATE NAME=STATE_LOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament loading disabled while printing!"
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unload macro alias for KlipperScreen
gcode:
  {% set get_params = [] %}
  {% for key in params %}
    {% set get_params = get_params.append(key + "=" + params[key])  %}
  {% endfor %}
  FILAMENT_UNLOAD {get_params|join(" ")}


[gcode_macro FILAMENT_UNLOAD]
description: Unload filament and disable rounout while running
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set unload = printer['gcode_macro _USER_VARIABLE'].unload_distance %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}

  ##### get hardware enables #####
  {% set ena_neo = printer['gcode_macro _USER_VARIABLE'].neo_display|lower %}
  {% set ena_runout = printer['gcode_macro _USER_VARIABLE'].runout|lower %}
  ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  {% set loadTemp = params.TEMP|default(0) %}
  {% if loadTemp == 0 %}
    {% set loadTemp = extruder_target%}
  {% endif %}

  ##### end of definitions #####
  ## Home if not homed already.
  #_CG28
  #  G90                            ; absolute positioning
  #{% if act_z < z_hop %}
  #  G1 Z{z_hop} F900            ; move head up
  #{% endif %}
  #G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location

  {% if printer.idle_timeout.state != "Printing" or printer.pause_resume.is_paused|lower == "true" %}
    SAVE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
    {% if ena_runout == 'motion' %}
      _PRINT_AR T="RUNOUT Motion Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if ena_runout == 'switch' %}
      _PRINT_AR T="RUNOUT Switch Sensor Enable: false"
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=BLUE {% endif %}
    {% set temp_changed = false %}
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp to low heat to %2dC" % minTemp)}
      {% set temp_changed = true %}
      M109 S{minTemp} ; heat extruder and wait
    {% endif %}
    {% if loadTemp != extruder_target %}
      {% set temp_changed = true %}
      M109 S{loadTemp}
    {% endif %}
    # Ball up the filament tip and retract out past the extruder gears
    {% if ena_neo == 'true' %} _LCD_KNOB COLOR=RESTORE {% endif %}
    #_FILAMENT_BALL WAIT=3
    Shape_Tip
    M83 ; Relative extrusion
    G1 E-{unload} F3000
    M400
    SAVE_VARIABLE VARIABLE=filament_loaded VALUE='"false"'
    # restore old extruder temperature
    {% if temp_changed %}
      M109 S{extruder_target}
    {% endif %}
    _PRINT_AR T="Filament unloaded"
    RESTORE_GCODE_STATE NAME=STATE_UNLOAD_FILAMENT
  {% else %}
    _PRINT_AR T="Filament unloading disabled while printing!"
  {% endif %}

[gcode_macro NOZZLECLEAN]
description: Move to bucket and scrub nozzle
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
   ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  SAVE_GCODE_STATE Name=STATE_NOZZLECLEAN
  _PRINT_AR T="Clean Nozzle" SHOW_LCD=true
  _CG28                                    ; home if not already homed
  G90                                      ; absolute positioning
  {% if act_z < z_hop %}
        G1 Z{z_hop} F900                       ; move head up
      {% endif %}
      G1 X{purge_pos[0]} Y{purge_pos[1]} F9000 ; move to purge bucket location
      {% if printer.extruder.can_extrude|lower == 'false' %}
          {action_respond_info("Extruder Temp to low to extrude")}
      {% else %}
          G1 Z{purge_pos[2]} F900  ; lower Z
          G92 E0                   ; reset Extruder
          M83                      ; relative extrusion
          G1 E5.00 F500            ; purge filament (5mm)
          G1 E5.00 F800            ; purge filament (5mm)
          G1 E-1.5 F800            ; retract filament (0.5)
      {% endif %}

  _WIPE
  # restore old extruder temperature
  #M109 S{extruder_target}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_NOZZLECLEAN

[gcode_macro PURGE]
description: Move to bucket and purge some plastic
gcode:
  ##### get user defines #####
  {% set add_temp = printer['gcode_macro _USER_VARIABLE'].extruder_min_add|int %}
  {% set purge_pos = printer['gcode_macro _USER_VARIABLE'].purge %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
   ##### store extruder temps #####
  {% set minTemp = printer.configfile.settings.extruder.min_extrude_temp|int + add_temp %}
  {% set extruder_target = printer.extruder.target %}
  {% set purgelen = params.LEN|default(50) %}
  ##### get toolhead position #####
  {% set act_z = printer.toolhead.position.z|float %}
  ##### end of definitions #####
  SAVE_GCODE_STATE Name=STATE_PURGE
  _PRINT_AR T="Purge filament" SHOW_LCD=true
  _CG28                                    ; home if not already homed
  G90                                      ; absolute positioning
  {% if act_z < z_hop %}
        G1 Z{z_hop} F900                       ; move head up
      {% endif %}
      G1 X{purge_pos[0]} Y{purge_pos[1]} F20000 ; move to purge bucket location
      {% if printer.extruder.can_extrude|lower == 'false' %}
          {action_respond_info("Extruder Temp to low to extrude")}
      {% else %}
      G1 Z{purge_pos[2]} F900  ; lower Z
      G92 E0                   ; reset Extruder
      M83                      ; relative extrusion
      G1 E{purgelen} F500            ; purge filament (5mm)
      G1 E-0.5 F800            ; retract filament (0.5)
      G92 E0                   ; reset Extruder
      {% endif %}
  _WIPE
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  RESTORE_GCODE_STATE Name=STATE_PURGE

[gcode_macro _WIPE]
description: Helper: Wipe nozzle at bucket
gcode:
  ##### get user defines #####
  {% set wipe_cnt = printer['gcode_macro _USER_VARIABLE'].wipe_cnt|int %}
  {% set wipe_start_pos = printer['gcode_macro _USER_VARIABLE'].wipe_start %}
  {% set wipe_end_pos = printer['gcode_macro _USER_VARIABLE'].wipe_end %}
  {% set wipe_offset = printer['gcode_macro _USER_VARIABLE'].wipe_offset|float %}
  ##### end of definitions #####
  G90 ; absolute positioning
  G0 X{wipe_start_pos[0]} Y{wipe_start_pos[1]} Z{wipe_start_pos[2]} F12000
  # move head diagonal to brush
  {% for wipe in range(0, wipe_cnt) %}
    {% for coordinate in [wipe_start_pos[0], wipe_end_pos[0]] %}
      G0 X{coordinate} Y{wipe_start_pos[1] + wipe_offset * wipe} F12000
    {% endfor %}
  {% endfor %}
  G0 X{wipe_end_pos[0]} Y{wipe_end_pos[1]} Z{wipe_end_pos[2]} F12000
    

[gcode_macro Save_Pressure_Advance]
# call this in your print start gcode after setting PA for the print
# (only necessary if the slicer inserts ramming gcode that sets PA to 0)
description: Save the current pressure advance value
# don't change any of the variables below this line
variable_pa: -1
gcode:
    # save PA if it is not 0
    {% set pa = printer.extruder.pressure_advance %}
    {% if pa > 0 %}
        SET_GCODE_VARIABLE MACRO=Save_Pressure_Advance VARIABLE=pa VALUE={pa}
    {% endif %}

[gcode_macro Restore_Pressure_Advance]
description: Restore saved pressure advance value
gcode:
    # restore PA if a previous value was saved
    {% if not (printer["gcode_macro Save_Pressure_Advance"].pa == -1) %}
        SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro Save_Pressure_Advance"].pa}
    {% endif %}

[gcode_macro Shape_Tip]
description: Perform tip-shaping, retraction, and cooling moves
gcode:
    SAVE_GCODE_STATE NAME=Shape_Tip_state
    Save_Pressure_Advance
    M83 # extruder relative mode
    
    # gcode generated by SuperSlicer, with XY moves removed
    ;--------------------
    ; CP TOOLCHANGE START
    ; toolchange #1
    ; material : PLA -> PLA
    ;--------------------
    M220 S100
    ; CP TOOLCHANGE UNLOAD
    ;WIDTH:0.65
    # G1  X66.273 Y170.819  
    SET_PRESSURE_ADVANCE ADVANCE=0
    G1 F68
    G1 E0.2816
    G1 F73
    G1 E0.3051
    G1 F83
    G1 E0.3453
    G1 F96
    G1 E0.399
    G1 F114
    G1 E0.4761
    G1 F138
    G1 E0.5767
    G1 F163
    G1 E0.5691
    # G1  Y170.039  F7200
    G1 F162
    G1 E0.1081
    G1 F196
    G1 E0.7644
    G1 F186
    G1 E0.8248
    G1 F203
    G1 E0.8483
    ;WIDTH:0.5
    G1 E-15 F6000
    G1 E-15.4 F5400
    G1 E-4.4 F2700
    G1 E-2.2 F1620
    # G1  Y169.259 
    G1 E14 F1200
    G1 E-14
    G1 E14
    G1 E-14
    G1 E14
    G1 E-14
    G1 E14
    G1 E-14
    ; SKINNYDIP START
    G1 E24 F1980
    G4 P0
    G1 E-24 F4200
    G4 P0
    ; SKINNYDIP END
    G1 F2000
    # G1  Y169.399  F2400
    G4 S0
    ; custom gcode: end_filament_gcode
    ; Filament-specific end gcode 
    ;END gcode for filament
    ; custom gcode end: end_filament_gcode

    Restore_Pressure_Advance
    RESTORE_GCODE_STATE NAME=Shape_Tip_state